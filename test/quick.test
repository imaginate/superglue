#!/bin/bash
#
# A couple of quick tests to verify installation and basic functionality.
#
# @author Adam Smith <adam@imaginate.life> (http://imaginate.life)
# @copyright 2016 Adam A Smith <adam@imaginate.life> (http://imaginate.life)
################################################################################

readonly UNCOLOR="$(printf '%b' '\033[0;0m')"
readonly RED="$(printf '%b' '\033[0;91m')"
readonly GREEN="$(printf '%b' '\033[0;32m')"

declare -a ERRORS
declare -a SGLFUNCS
declare -i FAILED=0

SGLFUNCS=()
for func in      \
  sgl_chk_cmd    \
  sgl_chk_dir    \
  sgl_chk_exit   \
  sgl_chk_file   \
  sgl_chk_uid    \
  sgl_color      \
  sgl_cp         \
  sgl_err        \
  sgl_mk_dest    \
  sgl_parse_args \
  sgl_print      \
  sgl_set_color  \
  sgl_source
do
  SGLFUNCS[${#SGLFUNCS[@]}]=${func}
done

################################################################################
## DEFINE HELPER FUNCTIONS
################################################################################

############################################################
# @func print_dash
# @use print_dash
# @return
#   0  PASS
############################################################
print_dash()
{
  printf "%s\n" '------------------------------'
}

############################################################
# @func print_result
# @use print_result SECTION
# @return
#   0  PASS
############################################################
print_result()
{
  if [[ ${#ERRORS[@]} -eq 0 ]]; then
    printf " %-7s %s\n" "$1" "${GREEN}PASS${UNCOLOR}"
  else
    printf " %-7s %s\n" "$1" "${RED}FAIL${UNCOLOR}"
    local error
    for error in "${ERRORS[@]}"; do
      printf " %s %s %s\n" '-' "${RED}STDERR${UNCOLOR}" "${error}" 1>&2
    done
    ERRORS=()
  fi
}

############################################################
# @func add_error
# @use add_error ...MSG
# @return
#   0  PASS
############################################################
add_error()
{
  ERRORS[${#ERRORS[@]}]="$*"
  (( ++FAILED ))
}

################################################################################
## PRINT TABLE HEADER
################################################################################

print_dash

################################################################################
## TEST INSTALL
################################################################################

for cmd in sgl sglue superglue; do
  file=/bin/${cmd}
  [[ -x ${file} ]] || add_error "missing executable \`${file}'"
done

for func in "${SGLFUNCS[@]}"; do
  file=/lib/superglue/${func}
  [[ -f ${file} ]] || add_error "missing function \`${file}'"
  file=/usr/share/superglue/help/${func}
  [[ -f ${file} ]] || add_error "missing help info \`${file}'"
done

file=/usr/share/superglue/help/superglue
[[ -f ${file} ]] || add_error "missing help info \`${file}'"

print_result INSTALL

################################################################################
## TEST COMMAND
################################################################################

src="${HOME}/source.sgl.file"
cat <<'EOF' > "${src}"
# SOURCE
# @dest $HOME/dest.sgl.file
# @dest ${TMP}/dest.sgl.file
# ...
EOF

while IFS= read -r line; do
  [[ -n "${line}" ]] && add_error "${line}"
done <<EOF
$(sgl mk_dest -d 'TMP=/tmp' -m 0755 "${src}" 3>&2 2>&1 1>&3-)
EOF

dest1="${HOME}/dest.sgl.file"
dest2='/tmp/dest.sgl.file'

[[ -f "${dest1}" ]] || add_error "missing dest file \`${dest1}'"
[[ -f "${dest2}" ]] || add_error "missing dest file \`${dest2}'"

[[ -x "${dest1}" ]] || add_error "invalid file mode for dest file \`${dest1}'"
[[ -x "${dest2}" ]] || add_error "invalid file mode for dest file \`${dest2}'"

if [[ -f "${dest1}" ]] && [[ "$(cat "${src}")" != "$(cat "${dest1}")" ]]; then
  add_error "invalid dest file \`${dest1}'"
fi
if [[ -f "${dest2}" ]] && [[ "$(cat "${src}")" != "$(cat "${dest2}")" ]]; then
  add_error "invalid dest file \`${dest2}'"
fi

[[ -f "${src}"   ]] && rm "${src}"
[[ -f "${dest1}" ]] && rm "${dest1}"
[[ -f "${dest2}" ]] && rm "${dest2}"

print_result COMMAND

################################################################################
## TEST WRAPPER
################################################################################

cmd="${HOME}/fake.sgl.cmd"
rnd="${HOME}/random.txt"
cat <<'EOF' > "${rnd}"
  Includes a mighty pattern for passing grep.
EOF
cat <<'EOF' > "${cmd}"
#!/bin/superglue -C

# Load only the needed functions.
sgl_source 'chk_*' err parse_args print

# Verify the user is root or exit the process.
sgl_chk_uid --exit --prg='Example' 1000

# Parse the arguments easily.
sgl_parse_args --prg 'Example' --options \
  '-a|--ask' Y \
  '-b|--bounce' \
  '-c|--coast' \
  '-t|--tell' M \
  '-?|--help'

# Handle the parsed options.
len=${#SGL_OPTS[@]}
for ((i=0; i<len; i++)); do
  opt="${SGL_OPTS[i]}"
  case "${opt}" in
    -a|--ask)
      DEMO_ASK="${SGL_OPT_VALS[i]}"
      # If empty throw an error and exit the process.
      [[ -n "${DEMO_ASK}" ]] || sgl_err VAL "invalid empty value for \`${opt}'"
      ;;
    -b|--bounce)
      DEMO_BOUNCE=1
      DEMO_COAST=0
      ;;
    -c|--coast)
      DEMO_BOUNCE=0
      DEMO_COAST=1
      ;;
    -t|--tell)
      if [[ ${SGL_OPT_BOOL[i]} -eq 1 ]]; then
        DEMO_TELL="${SGL_OPT_VALS[i]}"
      else
        DEMO_TELL="${DEMO_ASK}"
      fi
      ;;
    -\?|--help)
      echo 'some helpful info'
      exit 0
      ;;
  esac
done

# If grep fails exit the process.
${grep} 'a mighty pattern' "${HOME}/random.txt" > ${NIL}
sgl_chk_exit --exit --prg='Example' --cmd='grep' $?

exit 0
EOF
chmod 0755 "${cmd}"

while IFS= read -r line; do
  [[ -n "${line}" ]] && add_error "${line}"
done <<EOF
$("${cmd}" --ask='Something?' -ct 3>&2 2>&1 1>&3-)
EOF

[[ -f "${cmd}" ]] && rm "${cmd}"
[[ -f "${rnd}" ]] && rm "${rnd}"

print_result WRAPPER

################################################################################
## PRINT TABLE FOOTER
################################################################################

print_dash

################################################################################
## PRINT FINAL RESULTS
################################################################################

if [[ ${FAILED} -eq 0 ]]; then
  printf " %s\n" "${GREEN}All Tests Passed${UNCOLOR}"
  print_dash
  exit 0
else
  printf " %s\n" "${RED}${FAILED} Tests Failed${UNCOLOR}"
  print_dash
  exit 1
fi
