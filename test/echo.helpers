#!/bin/bash
#
# @author Adam Smith <adam@imaginate.life> (http://imaginate.life)
# @copyright 2016 Adam A Smith <adam@imaginate.life> (http://imaginate.life)
################################################################################

############################################################
# @func echo
# @use echo ...MSG
# @return
#   0  PASS
############################################################
echo()
{
  printf "%s\n" "${*}"
}
declare -fr echo

############################################################
# @func echo_err
# @use echo_err ...MSG
# @return
#   0  PASS
############################################################
echo_err()
{
  echo " - ${RED}ERR${UNCOLOR} ${*}" 1>&2
}
declare -fr echo_err

############################################################
# @func echo_errs
# @use echo_errs ...ERR
# @return
#   0  PASS
############################################################
echo_errs()
{
  local err

  for err in "${@}"; do
    echo_err "${err}"
  done
}
declare -fr echo_errs

############################################################
# @func echo_final
# @use echo_final
# @return
#   0  PASS
############################################################
echo_final()
{
  echo "$(mk_row)"

  if ((FAILED == 0)); then
    echo " ${GREEN}All Tests Passed${UNCOLOR}"
  else
    echo " ${RED}${FAILED} Tests Failed${UNCOLOR}"
  fi
}
declare -fr echo_final

############################################################
# @func echo_footer
# @use echo_footer
# @return
#   0  PASS
############################################################
echo_footer()
{
  echo "$(mk_row)"
  echo "$(mk_row "${FOOT}")"
  echo "$(mk_row)"
}
declare -fr echo_footer

############################################################
# @func echo_header
# @use echo_header
# @return
#   0  PASS
############################################################
echo_header()
{
  echo "$(mk_row)"
  echo "$(mk_row "${HEAD}")"
  echo "$(mk_row)"
}
declare -fr echo_header

############################################################
# @func echo_result
# @use echo_result SECTION
# @return
#   0  PASS
############################################################
echo_result()
{
  echo_section "${1}" ${#ERRORS[@]}
  echo_errs "${ERRORS[@]}"
}
declare -fr echo_result

############################################################
# @func echo_section
# @use echo_section SECTION RESULT
# @return
#   0  PASS
############################################################
echo_section()
{
  local section
  local result

  section="$(printf "%${SECTIONWIDTH}s" "${1}")"

  if ((${2} == 0)); then
    result="${GREEN}PASS${UNCOLOR}"
  else
    result="${RED}FAIL${UNCOLOR}"
  fi

  echo " ${section} ${result}"
}
declare -fr echo_section

############################################################
# @func echo_stop
# @use echo_stop ...MSG
# @return
#   0  PASS
############################################################
echo_stop()
{
  echo " - ${RED}STOP${UNCOLOR} ${*}" 1>&2
}
declare -fr echo_stop

############################################################
# Prints a specified number of dashes without a newline.
#
# @func mk_dash
# @use mk_dash COUNT
# @val COUNT  The number of dashes to print.
# @return
#   0  PASS
############################################################
mk_dash()
{
  local -i i
  local dash

  for ((i=0; i<${1}; i++)); do
    dash="${dash}-"
  done
  printf '%s' "${dash}"
}
declare -fr mk_dash

############################################################
# Prints a dashed title row without a newline.
#
# @func mk_row
# @use mk_row [TITLE]
# @val TITLE  Can be any string. If defined the TITLE is
#             padded with spaces and surrounded by dashes.
#             If undefined a row of dashes is printed.
# @return
#   0  PASS
############################################################
mk_row()
{
  local -i n
  local dash
  local row

  if ((${#} > 0)); then
    n=$((ROWLENGTH - ${#1} - 2))
    n=$((n / 2))
    dash="$(mk_dash ${n})"

    row="${dash} ${1} ${dash}"
    [[ ${#row} -lt ${ROWLENGTH} ]] && row="${row}-"
  else
    row="$(mk_dash ${ROWLENGTH})"
  fi

  printf '%s' "${row}"
}
declare -fr mk_row
