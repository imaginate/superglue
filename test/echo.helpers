# ECHO HELPERS
#
# Helper functions that print test data to `stdout' and `stderr'.
# See below outline for a quick reference of all functions
# defined here (listed by group).
#
# BASE BUILDING BLOCKS
#   `out'
#   `out2'
#   `echo'
#   `echo2'
#   `eol'
#   `eol2'
#   `paint'
#   `paint2'
#   `column'
#   `column2'
#
# GENERAL ROWS
#   `blank_row'
#   `err_row'
#   `err_rows'
#   `stop_row'
#
# TEST ROWS
#   `header'
#   `footer'
#   `section'
#   `results'
#
# @author Adam Smith <adam@imaginate.life> (http://imaginate.life)
# @copyright 2016-2017 Adam A Smith <adam@imaginate.life>
##############################################################################

##############################################################################
## BASE BUILDING BLOCKS
##############################################################################

############################################################
# @func out
# @use out [...MSG]
# @return
#   0  PASS
############################################################
out()
{
  printf '%s' "${*}"
}
declare -f -r out

############################################################
# @func out2
# @use out2 [...MSG]
# @return
#   0  PASS
############################################################
out2()
{
  printf '%s' "${*}" 1>&2
}
declare -f -r out2

############################################################
# @func echo
# @use echo [...MSG]
# @return
#   0  PASS
############################################################
echo()
{
  printf '%s\n' "${*}"
}
declare -f -r echo

############################################################
# @func echo2
# @use echo2 [...MSG]
# @return
#   0  PASS
############################################################
echo2()
{
  printf '%s\n' "${*}" 1>&2
}
declare -f -r echo2

############################################################
# @func eol
# @use eol
# @return
#   0  PASS
############################################################
eol()
{
  printf '\n'
}
declare -f -r eol

############################################################
# @func eol2
# @use eol2
# @return
#   0  PASS
############################################################
eol2()
{
  printf '\n' 1>&2
}
declare -f -r eol2

############################################################
# @func paint
# @use paint COLOR [...MSG]
# @val COLOR  Must be one of the below options.
#   `green'
#   `red'
# @val MSG    Can be any string.
# @return
#   0  PASS
############################################################
paint()
{
  if [[ ${#} -lt 2 ]]; then
    return 0
  fi

  if [[ ! -t 1 ]]; then
    shift
    out "${*}"
    return 0
  fi

  case "${1}" in
    green)
      out "${GREEN}"
      ;;
    red)
      out "${RED}"
      ;;
    *)
      return 0
      ;;
  esac
  shift

  out "${*}"
  out "${UNCOLOR}"
}
declare -f -r paint

############################################################
# @func paint2
# @use paint2 COLOR [...MSG]
# @val COLOR  Must be one of the below options.
#   `green'
#   `red'
# @val MSG    Can be any string.
# @return
#   0  PASS
############################################################
paint2()
{
  if [[ ${#} -lt 2 ]]; then
    return 0
  fi

  if [[ ! -t 1 ]]; then
    shift
    out2 "${*}"
    return 0
  fi

  case "${1}" in
    green)
      out2 "${GREEN}"
      ;;
    red)
      out2 "${RED}"
      ;;
    *)
      return 0
      ;;
  esac
  shift

  out2 "${*}"
  out2 "${UNCOLOR}"
}
declare -f -r paint2

############################################################
# @func column
# @use column WIDTH [...MSG]
# @return
#   0  PASS
############################################################
column()
{
  local -i width="${1}"

  shift
  printf "%${width}s" "${*}"
}
declare -f -r column

############################################################
# @func column2
# @use column2 WIDTH [...MSG]
# @return
#   0  PASS
############################################################
column2()
{
  local -i width="${1}"
 
  shift
  printf "%${width}s" "${*}" 1>&2
}
declare -f -r column2

##############################################################################
## GENERAL ROWS
##############################################################################

############################################################
# @func blank_row
# @use blank_row
# @return
#   0  PASS
############################################################
blank_row()
{
  local -i i=0

  while [[ ${i} -lt ${ROW_LENGTH} ]]; do
    out '-'
    i=$(( i + 1 ))
  done
  eol
}
declare -f -r blank_row

############################################################
# @func err_row
# @use err_row [...MSG]
# @return
#   0  PASS
############################################################
err_row()
{
  out2 ' - '
  paint2 red 'ERR'
  echo2 " ${*}"
}
declare -f -r err_row

############################################################
# @func err_rows
# @use err_rows [...ERR]
# @return
#   0  PASS
############################################################
err_rows()
{
  local err

  if [[ ${#} -eq 0 ]]; then
    return 0
  fi

  for err in "${@}"; do
    err_row "${err}"
  done
  return 0
}
declare -f -r err_rows

############################################################
# @func stop_row
# @use stop_row [...MSG]
# @return
#   0  PASS
############################################################
stop_row()
{
  out2 ' - '
  paint2 red 'STOP'
  echo2 "${*}"
}
declare -f -r stop_row

##############################################################################
## TEST ROWS
##############################################################################

############################################################
# @func header
# @use header
# @return
#   0  PASS
############################################################
header()
{
  blank_row
  echo "## ${HEADER}"
  blank_row
}
declare -f -r header

############################################################
# @func footer
# @use footer
# @return
#   0  PASS
############################################################
footer()
{
  blank_row
  echo "## ${FOOTER}"
  blank_row
}
declare -f -r footer

############################################################
# @func section
# @use section SECTION 
# @return
#   0  PASS
############################################################
section()
{
  out ' '
  column ${SECTION_WIDTH} "${1}"
  out ' '

  if [[ ${#TEST_ERRORS[@]} -eq 0 ]]; then
    paint green 'PASS'
  else
    paint red 'FAIL'
  fi
  eol

  err_rows "${TEST_ERRORS[@]}"
}
declare -f -r section

############################################################
# @func results
# @use results
# @return
#   0  PASS
############################################################
results()
{
  blank_row
  out ' '

  if [[ ${TESTS_FAILED} -eq 0 ]]; then
    paint green 'All Tests Passed'
  else
    paint red "${TESTS_FAILED} Tests Failed"
  fi
  eol
}
declare -f -r results

