#!/bin/bash
#
# @author Adam Smith <adam@imaginate.life> (http://imaginate.life)
# @copyright 2017 Adam A Smith <adam@imaginate.life> (http://imaginate.life)
################################################################################

############################################################
# @func echo
# @use echo ...MSG
# @return
#   0  PASS
############################################################
echo()
{
  printf "%s\n" "${*}"
}
declare -fr echo

############################################################
# @func echo_dashes
# @use echo_dashes
# @return
#   0  PASS
############################################################
echo_dashes()
{
  local -i i
  local dashes

  for ((i=0; i<${ROWLENGTH}; i++)); do
    dashes="${dashes}-"
  done
  echo "${dashes}"
}
declare -fr echo_dashes

############################################################
# @func echo_err
# @use echo_err ...MSG
# @return
#   0  PASS
############################################################
echo_err()
{
  echo " - ${RED}ERR${UNCOLOR} ${*}" 1>&2
}
declare -fr echo_err

############################################################
# @func echo_errs
# @use echo_errs ...ERR
# @return
#   0  PASS
############################################################
echo_errs()
{
  local err

  for err in "${@}"; do
    echo_err "${err}"
  done
}
declare -fr echo_errs

############################################################
# @func echo_final
# @use echo_final
# @return
#   0  PASS
############################################################
echo_final()
{
  echo_dashes

  if ((FAILED == 0)); then
    echo " ${GREEN}All Tests Passed${UNCOLOR}"
  else
    echo " ${RED}${FAILED} Tests Failed${UNCOLOR}"
  fi
}
declare -fr echo_final

############################################################
# @func echo_footer
# @use echo_footer
# @return
#   0  PASS
############################################################
echo_footer()
{
  echo_dashes
  echo "## ${FOOT}"
  echo_dashes
}
declare -fr echo_footer

############################################################
# @func echo_header
# @use echo_header
# @return
#   0  PASS
############################################################
echo_header()
{
  echo_dashes
  echo "## ${HEAD}"
  echo_dashes
}
declare -fr echo_header

############################################################
# @func echo_result
# @use echo_result SECTION
# @return
#   0  PASS
############################################################
echo_result()
{
  echo_section "${1}" ${#ERRORS[@]}
  echo_errs "${ERRORS[@]}"
}
declare -fr echo_result

############################################################
# @func echo_section
# @use echo_section SECTION RESULT
# @return
#   0  PASS
############################################################
echo_section()
{
  local section
  local result

  section="$(printf "%${SECTIONWIDTH}s" "${1}")"

  if ((${2} == 0)); then
    result="${GREEN}PASS${UNCOLOR}"
  else
    result="${RED}FAIL${UNCOLOR}"
  fi

  echo " ${section} ${result}"
}
declare -fr echo_section

############################################################
# @func echo_stop
# @use echo_stop ...MSG
# @return
#   0  PASS
############################################################
echo_stop()
{
  echo " - ${RED}STOP${UNCOLOR} ${*}" 1>&2
}
declare -fr echo_stop
